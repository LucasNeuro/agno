import os
import sys
from pathlib import Path

if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

from agno.agent import Agent
from agno.db.sqlite import SqliteDb
from agno.models.mistral import MistralChat
from agno.os import AgentOS
from agno.tools.api import CustomApiTools
from agno.knowledge.knowledge import Knowledge
from agno.knowledge.embedder.sentence_transformer import SentenceTransformerEmbedder
from agno.vectordb.chroma import ChromaDb
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente (da pasta raiz)
load_dotenv(dotenv_path='../.env')

# Obter API key das vari√°veis de ambiente
api_key = os.getenv("MISTRAL_API_KEY")

# Verificar se a API key foi encontrada
if not api_key:
    raise ValueError(
        "MISTRAL_API_KEY n√£o encontrada!\n"
        "Verifique se o arquivo .env existe e cont√©m a chave API do Mistral."
    )

print("Inicializando Assistente Niara com Mistral...")

# ============================================
# CONFIGURAR BASE DE CONHECIMENTO (RAG)
# ============================================

print("üìö Configurando base de conhecimento...")

# Configurar embedder (modelo para gerar vetores)
embedder = SentenceTransformerEmbedder(
    id="all-MiniLM-L6-v2",  # Modelo leve e eficiente
)

# Configurar banco vetorial (ChromaDB)
vector_db = ChromaDb(
    collection="klona_knowledge",
    embedder=embedder,
)

# Criar sistema de conhecimento
knowledge = Knowledge(
    vector_db=vector_db,
)

# PDFs ser√£o processados separadamente
print("üìÑ PDFs devem ser processados com: python process_pdfs.py")

print("‚úÖ Base de conhecimento configurada!")


mistral_agent = Agent(
    name="Assistente Niara",
    
    # Modelo Mistral
    model=MistralChat(
        id="mistral-large-latest",  
        api_key=api_key,
    ),
    
    # Base de conhecimento integrada (RAG)
    knowledge=knowledge,
    add_knowledge_to_context=True,  # RAG autom√°tico
    search_knowledge=True,          # Busca inteligente
    
    # Database SQLite para persistir o hist√≥rico
    db=SqliteDb(db_file="mistral_agent.db"),
    
    # Memory habilitada - o agente lembra informa√ß√µes sobre o usu√°rio
    enable_agentic_memory=True,
    add_memories_to_context=True,    # Adiciona mem√≥rias ao contexto
    
    # Hist√≥rico de conversas - ESSENCIAL para contexto
    add_history_to_context=True,     # Adiciona hist√≥rico ao contexto
    num_history_runs=10,             # √öltimas 10 execu√ß√µes
    search_session_history=True,     # Busca em sess√µes anteriores
    num_history_sessions=5,          # √öltimas 5 sess√µes
    read_chat_history=True,          # L√™ hist√≥rico de chat
    
    # Reasoning desabilitado - respostas diretas em portugu√™s
    reasoning=False,
    
    # Ferramentas dispon√≠veis
    tools=[
        CustomApiTools(
            base_url="https://jsonplaceholder.typicode.com",  # API de teste gen√©rica
            headers={"Content-Type": "application/json"},
            timeout=30,
            verify_ssl=True,
            enable_make_request=True
        )
    ],
    
    # Instru√ß√µes do agente
instructions=[
    "Voc√™ √© o assistente virtual da NIARA - empresa de tecnologia para turismo.",
    "IMPORTANTE: Sempre responda em PORTUGU√äS BRASILEIRO. Nunca use ingl√™s.",
    "",
    "SOBRE A NIARA:",
    "- Somos uma empresa de tecnologia especializada em solu√ß√µes para o setor de turismo",
    "- Oferecemos sistemas de gest√£o, chatbots, e ferramentas digitais para empresas de turismo",
    "- Nossa miss√£o √© modernizar e otimizar o atendimento no setor tur√≠stico",
    "",
    "SUA BASE DE CONHECIMENTO cont√©m:",
    "- Manual de configura√ß√£o do Chatbot Asksuite",
    "- Guias de cria√ß√£o e gest√£o de usu√°rios", 
    "- Configura√ß√µes de autentica√ß√£o e seguran√ßa (MFA)",
    "- Permiss√µes por tipo de usu√°rio",
    "- Configura√ß√µes de recebimento e PIX",
    "- Sistema de marcadores",
    "- M√≥dulo de extras e funcionalidades avan√ßadas",
        "",
        "DETEC√á√ÉO DE INTEN√á√ïES E USO AUTOM√ÅTICO DE FERRAMENTAS:",
        "",
        "QUANDO USAR make_request (API):",
        "- Palavras-chave: 'usu√°rios', 'posts', 'dados', 'buscar', 'consultar', 'ver', 'listar', 'mostrar'",
        "- Frases: 'Quero ver...', 'Busque...', 'Consulte...', 'Mostre...', 'Liste...'",
        "- Endpoints dispon√≠veis: /users, /posts, /comments, /albums, /photos, /todos",
        "- A√á√ÉO: Use make_request IMEDIATAMENTE sem pedir permiss√£o!",
        "",
        "QUANDO USAR update_user_memory (MEM√ìRIA):",
        "- Palavras-chave: 'meu nome √©', 'sou', 'gosto de', 'prefiro', 'trabalho', 'estudo'",
        "- Frases: 'Eu sou...', 'Meu nome...', 'Gosto de...', 'Prefiro...'",
        "- A√á√ÉO: Salve a informa√ß√£o automaticamente na mem√≥ria!",
        "",
        "QUANDO USAR BASE DE CONHECIMENTO (RAG):",
        "- Perguntas sobre: pol√≠ticas, FAQ, problemas t√©cnicos, atendimento, produtos",
        "- Frases: 'Qual a pol√≠tica...', 'Como fa√ßo...', 'Problema com...', 'Preciso de ajuda...'",
        "- A√á√ÉO: SEMPRE consulte sua base de conhecimento antes de responder!",
        "",
"EXEMPLOS PR√ÅTICOS:",
"Usu√°rio: 'Como configurar o chatbot?' ‚Üí Voc√™: 'Vou te ajudar com a configura√ß√£o do Chatbot Asksuite da Niara!' [RAG]",
"Usu√°rio: 'Meu nome √© Ana' ‚Üí Voc√™: 'Prazer, Ana! Vou lembrar disso.' [update_user_memory]",
"Usu√°rio: 'Como criar usu√°rios?' ‚Üí Voc√™: 'Baseado na nossa documenta√ß√£o, vou te mostrar como criar usu√°rios no sistema.' [RAG]",
"Usu√°rio: 'Como configurar PIX?' ‚Üí Voc√™: 'Segundo nosso manual, vou te explicar como configurar PIX para recebimento.' [RAG]",
        "",
        "REGRAS IMPORTANTES:",
        "1. NUNCA pergunte se pode usar as ferramentas - USE automaticamente!",
        "2. Seja PROATIVO - detecte a inten√ß√£o e aja imediatamente",
        "3. SEMPRE consulte sua base de conhecimento para perguntas de atendimento",
        "4. Explique o que est√° fazendo enquanto executa",
        "5. Use as ferramentas corretas para cada situa√ß√£o",
        "",
"Para tarefas complexas, divida em etapas menores e execute uma por vez.",
"Sempre busque a melhor solu√ß√£o para o usu√°rio da Niara.",
"Use markdown para estruturar suas respostas quando apropriado.",
"Seja amig√°vel, prestativo e represente bem a marca Niara em todas as intera√ß√µes.",
"Quando usar APIs, explique claramente o que est√° fazendo e os resultados obtidos.",
"Voc√™ tem mem√≥ria avan√ßada (agentic memory) e pode criar, atualizar ou deletar mem√≥rias quando relevante.",
"Use sua mem√≥ria para personalizar respostas e lembrar de conversas anteriores.",
"Para atendimento, SEMPRE baseie suas respostas na base de conhecimento da Niara quando relevante.",
"Lembre-se: voc√™ representa a Niara, uma empresa de tecnologia para turismo.",
"Seja especialista em solu√ß√µes tecnol√≥gicas para o setor tur√≠stico.",
    ],
    
    # Formato de sa√≠da
    markdown=True,
)

print(f"Agente '{mistral_agent.name}' criado com sucesso!")

# ============================================
# CRIAR AGENTOS (Runtime FastAPI)
# ============================================
agent_os = AgentOS(
    agents=[mistral_agent],
)

# Obter a aplica√ß√£o FastAPI do AgentOS
app = agent_os.get_app()

print("\n" + "="*70)
print("ü§ñ ASSISTENTE NIARA COM RAG PRONTO!")
print("="*70)
print("\nConfigura√ß√µes:")
print(f"   ‚Ä¢ Nome do Agente: {mistral_agent.name}")
print(f"   ‚Ä¢ Modelo: Mistral Large Latest")
print(f"   ‚Ä¢ Tipo: Assistente Niara - Tecnologia para Turismo")
print(f"   ‚Ä¢ Reasoning: Desabilitado (respostas diretas em portugu√™s)")
print(f"   ‚Ä¢ Memory: Agentic Memory (controle total)")
print(f"   ‚Ä¢ Hist√≥rico: √öltimas 10 execu√ß√µes + 5 sess√µes")
print(f"   ‚Ä¢ Contexto: Mem√≥rias + Hist√≥rico de chat")
print(f"   ‚Ä¢ Intelig√™ncia: Detec√ß√£o autom√°tica de inten√ß√µes")
print(f"   ‚Ä¢ Ferramentas: Uso autom√°tico sem permiss√£o")
print(f"   ‚Ä¢ Database: mistral_agent.db")
print(f"   ‚Ä¢ Ferramentas: CustomApiTools (HTTP Requests)")
print(f"   ‚Ä¢ API Base: https://jsonplaceholder.typicode.com")
print(f"   ‚Ä¢ üÜï Base de Conhecimento: Pronta para documentos")
print(f"   ‚Ä¢ üÜï RAG: Habilitado (busca autom√°tica)")
print(f"   ‚Ä¢ üÜï Banco Vetorial: ChromaDB")
print(f"   ‚Ä¢ üÜï Embedder: all-MiniLM-L6-v2")
print("\nPara iniciar o servidor:")
print("   cd app && python klona_agent.py")
print("\nEndpoints dispon√≠veis:")
print("   ‚Ä¢ API Documentation: http://localhost:8000/docs")
print("   ‚Ä¢ Health Check: http://localhost:8000/health")
print("\nConectar ao AgentOS UI:")
print("   1. Acesse: https://os.agno.com")
print("   2. Fa√ßa login")
print("   3. Clique em 'Add new OS' ‚Üí 'Local'")
print("   4. Configure URL: http://localhost:8000")
print("   5. Clique em 'Connect'")
print("="*70 + "\n")

# ============================================
# SERVIR O AGENTOS (M√©todo Oficial)
# ============================================
if __name__ == "__main__":
    # Usar o m√©todo oficial do AgentOS para servir
    agent_os.serve(
        app="klona_agent:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )